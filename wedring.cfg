# :: Wedring Pipeline Configuration File ::
# This is the Wedring configuration file. It is useful just if you have specific
# needings for analyzing your data. All parameters set below are the defaults
# for Wedring, for the mapping softwares, Bowtie and TopHat, for the indexer,
# Bowtie-Build, and for DESeq (from R's Bioconductor project).
# The configuration sections are divided in four groups according to the
# Wedring stage they refer to. For the Mapping stage sections are bowtie or
# tophat which will only be seen according to the parameter set by the option
# -m/--mapper (i. e., if you set -m to tophat, only the section tophat will be
# verified). For the Indexing stage there is the bowtie-build section which
# will only be verified if it were necessary, i. e. when you provide the
# reference sequence without providing the Burrow-Wheeler index sufix path
# itself. The DE section refers to the Differential Expression stage that will
# only be verified if the pipeline were executed if none of the barrier flags
# --just-index, --just-map or --just-counttbl were set. 
#
# Notes: The lines [bowtie-build], [bowtie], [tophat] and [DE]  are section
# names. DONT change them! Lines begining with # are comments, they dont affect
# the pipeline execution.

# =========================================================================== #
# -------------------:: Wedring pipeline Indexing stage ::------------------- #
# =========================================================================== #

# =========================================================================== #
#                     ::  Bowtie-Build configuration section ::
# For more informations about Bowtie-Build and its parameters see:
# http://bowtie-bio.sourceforge.net/manual.shtml
# =========================================================================== #

[bowtie-build]

# Build a colorspace index, to be queried using bowtie -C.
# Bowtie-Build option: -C/--color
# Expected value: true, false
color = false

# Disable the default behavior whereby bowtie-build automatically selects values
# for the --bmax, --dcv and --packed parameters according to available memory.
# Instead, user may specify values for those parameters.
# Bowtie-Build option: -a/--noauto
# Expected value: true, false
noauto = false

# Use a packed (2-bits-per-nucleotide) representation for DNA strings. This
# saves memory but makes indexing 2-3 times slower.
# Bowtie-Build option: -p/--packed
# Expected value: true, false
packed = false

# The maximum number of suffixes allowed in a block. Allowing more suffixes per
# block makes indexing faster, but increases peak memory usage.
# Bowtie-Build option: --bmax <int>
# Expected value: integer value
bmax = 4

# Use <int> as the period for the difference-cover sample. A larger period
# yields less memory overhead, but may make suffix sorting slower, especially if 
# repeats are present.
# Bowtie-Build option: --dcv <int>
# Expected value: integer value (power of 2 no greater than 4096)
dcv = 1024

# Disable use of the difference-cover sample. Suffix sorting becomes quadratic-
# time in the worst case (where the worst case is an extremely repetitive 
# reference).
# Bowtie-Build option: --nodc
# Expected value: true, false
nodc = false

# Do not build the NAME.3.ebwt and NAME.4.ebwt portions of the index, which
# contain a bitpacked version of the reference sequences and are used for paired-
# end alignment.
# Bowtie-Build option: -r/--noref
# Expected value: true, false
noref = false

# Build only the NAME.3.ebwt and NAME.4.ebwt portions of the index, which
# contain a bitpacked version of the reference sequences and are used for paired-
# end alignment.
# Bowtie-Build option: -3/--justref
# Expected value: true, false
justref = false

# To map alignments back to positions on the reference sequences, it is 
# necessary to annotate ("mark") some or all of the Burrows-Wheeler rows with
# their corresponding location on the genome. -o/--offrate governs how many rows
# get marked: the indexer will mark every 2^<int> rows. Marking more rows makes
# reference-position lookups faster, but requires more memory to hold the
# annotations at runtime. The default is 5 (every 32nd row is marked; for human
# genome, annotations occupy about 340 megabytes).
# Bowtie-Build option: -o/--offrate <int>
# Expected value: integer value
offrate = 5

# The ftab is the lookup table used to calculate an initial Burrows-Wheeler
# range with respect to the first <int> characters of the query. A larger <int>
# yields a larger lookup table but faster query times. The ftab has size 4^(<int>
# +1) bytes. The default setting is 10 (ftab is 4MB).
# Bowtie-Build option: -t/--ftabchars <int>
# Expected value: integer value
ftabchars = 10

# Convert Ns in the reference sequence to As before building the index. By
# default, Ns are simply excluded from the index and bowtie will not report
# alignments that overlap them.
# Bowtie-Build option: --ntoa
# Expected value: true, false
ntoa = false

# Endianness to use when serializing integers to the index file.
# Bowtie-Build option: --big | --little
# Expected value: big | little
endianness = little

# Use <int> as the seed for pseudo-random number generator.
# Bowtie-Build option: --seed <int>
# Expected value: 0 (ignore), 1, 2, ...
seed = 0

# Index only the first <int> bases of the reference sequences (cumulative across 
# sequences) and ignore the rest.
# Bowtie-Build option: --cutoff <int>
# Expected value: 0 (ignore), 1, 2, ...
cutoff = 0

# bowtie-build is verbose by default. With this option bowtie-build will print
# only error messages.
# Bowtie-Build option: -q/--quiet
# Expected value: true, false
quiet = false

# =========================================================================== #
# -------------------:: Wedring pipeline Mapping stage ::-------------------- #
# =========================================================================== #

# =========================================================================== #
#                     :: Bowtie configuration section ::
# For more informations about Bowtie and its parameters see:
# http://bowtie-bio.sourceforge.net/manual.shtml
# =========================================================================== #

[bowtie]

# The query input files:
# Bowtie option: -f | -q
# Values accepted: fasta, fastq
query_in_file = fastq

# Map in colorspace:
# Bowtie option: -C/--color
# Values accepted: true, false
color = false

# Quality files (for unpaired CSFASTA reads):
# Bowtie option: -Q/--quals <files>
# Values accepted: true, false
# reads2.qual)
quals = false

# Quality files (for paired CSFASTA #1 mates):
# Bowtie option: --Q1 <files>
# Values accepted: true, false
Q1 = false

# Quality files (for unpaired CSFASTA #2 mates):
# Bowtie option: --Q2 <files>
# Values accepted: true, false
Q2 = false

# Skip the first <int> reads or pairs in the input.
# Bowtie option: -s/--skip <int>
# Values accepted: 0 (do not skip), 1, 2, ...
skip = 0

# Only align the first <int> reads or read pairs from the input.
# Bowtie option: --u/--qupto <int>
# Values accepted: 0 (no limit), 1, 2, ...
qupto = 0

# Trim <int> bases from high-quality (left) end of each read before alignment.
# Bowtie option: -5/--trim5 <int>
# Values accepted: integer value
trim5 = 0

# Trim <int> bases from low-quality (right) end of each read before alignment.
# Bowtie option: -3/--trim3 <int>
# Values accepted: 0, 1, 2, ...
trim3 = 0

# Input qualities are ASCII chars equal to the Phred quality plus 33 or input
# qualities are ASCII chars equal to the Phred quality plus 64.
# Bowtie option: --phred33-quals | --phred64-quals
# Values accepted: phred33, phred64
input_qualties = phred33

# Convert input qualities from Solexa to Phred.This is usually the right option
# for use with (unconverted) reads emitted by GA Pipeline versions prior to 1.3.
# Bowtie option: --solexa-quals
# Values accepted: true, false
solexa_quals = false

# Same as --phred64-quals. This is usually the right option for use with
# (unconverted) reads emitted by GA Pipeline version 1.3 or later.
# Bowtie option: --solexa1.3-quals
# Values accepted: true, false
solexa1.3_quals = false

# Quality values are represented in the read input file as space-separated ASCII 
# integers, e.g., 40 40 30 40..., rather than ASCII characters, e.g., II?I.... 
# Integers are treated as being on the Phred quality scale unless --solexa-quals 
# is also specified.
# Bowtie option: --integer-quals
# Values accepted: true, false
integer_quals = false

# Report alignments with at most <int> mismatches. -v is mutually exclusive with -n.
# Bowtie option: -v
# Values accepted: 0, 1, 2, ...
v = 0

# Maximum number of mismatches permitted in the "seed", i.e. the first L base
# pairs of the read.This option is mutually exclusive with the -v option.
# Bowtie option: -n/--seedmms <int>
# Values accepted: 0, 1, 2 or 3.
n = 2

# Maximum permitted total of quality values at all mismatched read positions
# throughout the entire alignment, not just in the "seed".
# Bowtie option: -e/--maqerr <int>
# Values accepted: integer value
maqerr = 70

# The seed length (the number of bases on the high-quality end of the read to
# which the -n ceiling applies).
# Bowtie option: -l/--seedlen <int>
# Values accepted: 5, 6, ...
l = 28

# Prevent rounding in quality values in the Phred quality scale.
# Bowtie option: --nomaqround
# Values accepted: true, false
nomaqround = false

# The minimum insert size for valid paired-end alignments.
# Bowtie option: -I/--minins
# Values accepted: integer value
minins = 0

# The maximum insert size for valid paired-end alignments.
# Bowtie option: -X/--maxins
# Values accepted: integer value
maxins = 250

# The upstream/downstream mate orientations for a valid paired-end alignment
# against the forward reference strand. Default: --fr when -C is not specified,
# --ff when -C is specified.
# Bowtie option: --fr | --rf | --ff
# Values accepted: fr, rf or ff
mate_orientation = fr

# If --nofw is specified, bowtie will not attempt to align against the forward
# reference strand. If --norc is specified, bowtie will not attempt to align
# against the reverse-complement reference strand.
# Bowtie option: --nofw |--norc
# Values accepted: none, nofw, norc
not_aln_strand = none

# The maximum number of backtracks permitted when aligning a read in -n 2 or
# -n 3 mode. Default: 125 without --best, 800 with --best.
# Bowtie option: --maxbts
# Values accepted: integer value
maxbts = 125

# For paired-end alignment, this is the maximum number of attempts bowtie will
# make to match an alignment for one mate up with an alignment for the opposite
# mate.
# Bowtie option: --pairtries <int>
# Values accepted: integer value
pairtries = 100

# Try as hard as possible to find valid alignments when they exist, including
# paired-end alignments.
# Bowtie option: -y/--tryhard
# Values accepted: true, false
tryhard = false

# The number of megabytes of memory a given thread is given to store path
# descriptors in --best mode.
# Bowtie option: --chunkmbs <int>
# Values accepted: integer value
chunkmbs = 64

# Report up to <int> valid alignments per read or pair.
# Bowtie option: -k <int>
# Values accepted: integer value
k = 1

# Report all valid alignments per read or pair.
# Bowtie option: -a/--all
# Values accepted: true, false
a = false

# Suppress all alignments for a particular read or pair if more than <int>
# reportable alignments exist for it.
# Bowtie option: -m <int>
# Values accepted: 0 (no limit), 1, 2, 3, ...
m_ = 0

# Behaves like -m except that if a read has more than <int> reportable
# alignments, one is reported at random. With this option --best is enabled
# automatically.
# Bowtie option: -M <int>
# Values accepted: 0 (no limit), 1, 2, 3, ...
_M = 0

# Make Bowtie guarantee that reported singleton alignments are "best" in terms
# of stratum and in terms of the quality values at the mismatched position(s).
# Bowtie option: --best
# Values accepted: true, false
best = false

# If many valid alignments exist and are reportable and they fall into more than
# one alignment "stratum", report only those alignments that fall into the best
# stratum. --best must also be specified.
# Bowtie option: --strata
# Values accepted: true, false
strata = false

# Print the amount of wall-clock time taken by each phase.
# Bowtie option: -t/--time
# Values accepted: true, false
time = false

# Print nothing besides alignments.
# Bowtie option: --quiet
# Values accepted: true, false
quiet = false

# Write all reads for which at least one alignment was reported to a file. If
# true, a file with the name "<bowtie_out>_mapped" will be created.
# Bowtie option: --al <filename>
# Values accepted: true, false
al = false

# Write all reads that could not be aligned to a file. If true, a file with the
# name "<bowtie_out>_unmapped" will be created.
# Bowtie option: --un <filename>
# Values accepted: true, false
un = false

# Write all reads with a number of valid alignments exceeding the limit set with
# the -m option to a file. If true, a file with the name "<bowtie_out>_suppresed"
# will be created.
# Bowtie option: --max <filename>
# Values accepted: true, false
max = false

# When decoding colorspace alignments, use <int> as the SNP penalty
# Bowtie option: --snpphred
snpphred = 30

# When decoding colorspace alignments, use <int> (a decimal number) as the estimated
# ratio of SNPs per base.
# Bowtie option: --snpfrac
snpfrac = 0.001

# When decoding colorpsace alignments, bowtie trims off a nucleotide and quality
# from the left and right edges of the alignment.
# Bowtie option: --col-keepends
# Values accepted: true, false
col_keepends = false

# If an alignment is non-repetitive (according to -m, --strata and other) set 
# the MAPQ (mapping quality) field to this value.
# Bowtie option: --mapq <int>
# Values accepted: integer value
mapq = 255

# Override the offrate of the index with <int>.
# Bowtie option: -o/--offrate <int>
# Values accepted: integer value
offrate = 0

# Launch <int> parallel search threads. Threads will run on separate processors/
# cores and synchronize when parsing reads and outputting alignments.
# Bowtie option: -p/--threads <int>
# Values accepted: integer value
threads = 1

# Use memory-mapped I/O to load the index, rather than normal C file I/O.
# Bowtie option: --mm
# Values accepted: true, false
mm = false

# Use shared memory to load the index, rather than normal C file I/O.
# Bowtie option: --shmem
# Values accepted: true, false
shmen = false

# Use <int> as the seed for pseudo-random number generator.
# Bowtie option: --seed <int>
# Values accepted: 0 (ignored), 1, 2...
seed = 0

# ============================================================================ #
#                      :: TopHat configuration section ::
# For more informations about TopHat and its parameters see:
# http://tophat.cbcb.umd.edu/manual.html
# ============================================================================ #

[tophat]

# Uses Bowtie1 instead of Bowtie2. If you use colorspace reads, you need to use 
# this option as Bowtie2 does not support colorspace reads.
# TopHat option: --bowtie1
# Values accepted: true, false
bowtie1 = false

# This is the expected (mean) inner distance between mate pairs. This parameter
# is required for paired end runs. There is no default.
# TopHat option: -r/--mate-inner-dist <int>
# Expected value: integer value
mate_inner_dist = 0

# The standard deviation for the distribution on inner distances between mate
# pairs.
# TopHat option: --mate-std-dev <int>
# Expected value: integer value
mate_std_dev = 20

# The "anchor length". TopHat will report junctions spanned by reads with at
# least this many bases on each side of the junction.
# TopHat option:  -a/--min-anchor-length <int>
# Expected value: integer value (at least 3)
min_anchor_length = 8

# The maximum number of mismatches that may appear in the "anchor" region of a spliced alignment.
# TopHat option: -m/--splice-mismatches <int>
# Expected value: integer value
splice_mismatches = 0

# The minimum intron length.
# TopHat option: -i/--min-intron-length <int>
# Expected value: integer value 
min_intron_length = 70

# The maximum intron length.
# TopHat option: -I/--max-intron-length <int>
# Expected value: integer value 
max_intron_length = 500000

# The maximum insertion length.
# TopHat option: --max-insertion-length <int>
# Expected value: integer value 
max_insertion_length = 3

# The maximum deletion length.
# TopHat option: --max-deletion-length <int>
# Expected value: integer value 
max_deletion_length = 3

# Use the Solexa scale for quality values in FASTQ files.
# TopHat option: --solexa-quals
# Expected value: true, false
solexa_quals = false

# As of the Illumina GA pipeline version 1.3, quality scores are encoded in
# Phred-scaled base-64. Use this option for FASTQ files from pipeline 1.3 or
# later.
# TopHat option: --solexa1.3-quals
# Expected value: true, false
solexa1.3_quals = false

# Separate quality value files ( for colorspace read files - CSFASTA)
# TopHat option: -Q/--quals
# Expected value: true, false
quals = false

# Colorspace reads.
# TopHat option: -C/--color
# Expected value: true, false
color = false

# Quality values are space-delimited integer values, this becomes default when
# you specify -C/--color.
# TopHat option: --integer-quals
# Expected value: true, false
integer_quals = false

# Use this many threads to align reads.
# TopHat option: -p/--num-threads <int>
# Expected value: integer value 
num_threads = 1

# Instructs TopHat to allow up to this many alignments to the reference for a
# given read, and suppresses all alignments for reads with more than this many
# alignments.
# TopHat option: -g/--max-multihits <int>
# Expected value: integer values
max_multihits = 20

# Without the option, TopHat will report best or primary alignments based on
# alignment scores (AS).
# TopHat option: --report-secondary-hits
# Expected value: true, false
report_secondary_hits = false

# This option will allow mate pairs to map to different chromosomes, distant
# places on the same chromosome, or on the same strand.
# TopHat option: --report-discordant-pair-alignments
# Expected value: true, false
report_discordant_pair_alignments = false

# Disables the coverage based search for junctions.
# TopHat option: --no-coverage-search
# Expected value: true, false
no_coverage_search = false

# Enables the coverage based search for junctions. Use when coverage search is
# disabled by default (such as for reads 75bp or longer), for maximum
# sensitivity.
# TopHat option: --coverage-search
# Expected value: true, false
coverage_search = false

# With this option, the pipeline will attempt to find alignments incident to
# microexons.
# TopHat option: --microexon-search
# Expected value: true, false
microexon_search = false

# TopHat will treat the reads as strand specific.
# TopHat option: --library-type
# Expected value: fr-unstranded, fr-firststrand, fr-secondstrand
library_type = fr-unstranded

# Maximum number of mismatches allowed when reads are aligned to the
# transcriptome.
# TopHat option: -n/--transcriptome-mismatches <int>
# Expected value: integer value
n = 2

# When whole reads are first mapped on the genome, this many mismatches in each
# read alignment are allowed.
# TopHat option: --genome-read-mismatches <int>
# Expected value: integer value
genome_read_mismatches = 2

# Final read alignments having more than these many mismatches are discarded.
# TopHat option: --read-mismatches <int>
# Expected value: integer value
read_mismatches = 2 

# TopHat uses "-n" in Bowtie for initial read mapping, instead of -v.
# TopHat option: --bowtie-n
# Expected value: true, false
bowtie_n = false

# Read segments are mapped independently, allowing up to this many mismatches
# in each segment alignment.
# TopHat option: --segment-mismatches <int>
# Expected value: integer value
segment_mismatches = 2

# Each read is cut up into segments, each at least this long.
# TopHat option: --segment-length <int>
# Expected value: integer value
segment_length = 25

# The minimum intron length that may be found during coverage search.
# TopHat option: --min-coverage-intron <int>
# Expected value: integer value
min_coverage_intron = 50

# The maximum intron length that may be found during coverage search.
# TopHat option: --max-coverage-intron <int>
# Expected value: integer value
max_coverage_intron = 20000

# The minimum intron length that may be found during split-segment search.
# TopHat option: --min-segment-intron <int>
# Expected value: integer value
min_segment_intron = 50

# The maximum intron length that may be found during split-segment search.
# TopHat option: --max-segment-intron <int>
# Expected value: integer value
max_segment_intron = 500000

# Causes TopHat to preserve its intermediate files produced during the run
# (mostly useful for debugging).
# TopHat option: --keep-tmp
# Expected value: true, false
keep_tmp = false

# Manually specify the program used for compression of temporary files.
# TopHat option: -z/--zpacker <packer>
# Expected value: none, sequence of characters
zpacker = gzip

# Turn on fusion mapping.
# TopHat option: --fusion-search
# Expected value: true, false
fusion_search = false

# A "supporting" read must map to both sides of a fusion by at least this many 
# bases.
# TopHat option: --fusion-anchor-length <int>
# Expected value: integer value
fusion_anchor_length = 20

# For intra-chromosomal fusions, TopHat-Fusion tries to find fusions separated
# by at least this distance.
# TopHat option: --fusion-min-dist <int>
# Expected value: integer value
fusion_min_dist = 10000000

# Reads support fusions if they map across fusion with at most this many 
# mismatches.
# TopHat option: --fusion-read-mismatches <int>
# Expected value: integer value
fusion_read_mismatches = 2

# Reads that map to more than this many places will be ignored.
# TopHat option: --fusion-multireads <int>
# Expected value: integer value
fusion_multireads = 2

# Pairs that map to more than this many places will be ignored.
# TopHat option: --fusion-multipairs <int>
# Expected value: integer value
fusion_multipairs = 2

# Ignore some chromosomes such as chrM when detecting fusion break points.
# TopHat option: --fusion-ignore-chromosomes
# Expected value: none, sequence of characters
fusion_ignore_chromosomes = none

# Supply TopHat with a list of raw junctions.
# TopHat option: -j/--raw-juncs <.juncs file>
# Expected value: none, sequence of characters
raw_juncs = none

# Only look for reads across junctions indicated in the supplied GFF or 
# junctions file.
# TopHat option: --no-novel-juncs
# Expected value: true, false
no_novel_juncs = false

# Supply TopHat with a set of gene model annotations and/or known transcripts,
# as a GTF 2.2 or GFF3 formatted file.
# TopHat option: -G/--GTF
# Expected value: true, false
G = false

# When providing TopHat with a known transcript file (-G/--GTF option above),
# a transcriptome sequence file is built and a Bowtie index has to be created
# for it in order to align the reads to the known transcripts.
# TopHat option: --transcriptome-index <dir/prefix>
# Expected value: none, sequence of characters
transcriptome_index = none

# Only align the reads to the transcriptome and report only those mappings as 
# genomic mappings.
# TopHat option: -T/--transcriptome-only
# Expected value: true, false
transcriptome_only = false

# Maximum number of mappings allowed for a read, when aligned to the 
# transcriptome.
# TopHat option: -x/--transcriptome-max-hits <int>
# Expected value: 0 (ignored), 1, 2, ...
transcriptome_max_hits = 0

# When mapping reads on the transcriptome, some repetitive or low complexity
# reads that would be discarded in the context of the genome may appear to
# align to the transcript sequences and thus may end up reported as mapped to
# those genes only.
# TopHat option: -M/--prefilter-multihits
# Expected value: true, false
prefilter_multihits = false

#Supply TopHat with a list of insertions with respect to the
#reference.
# TopHat option: --insertions <.juncs file>
# Expected value: none, sequence of characters
insertions = none

#Supply TopHat with a list of deletions with respect to the
#reference.
# TopHat option: --deletions <.juncs file>
# Expected value: none, sequence of characters
deletions = none

# Only look for reads across indels in the supplied indel file, or disable
# indel detection when no file has been provided.
# TopHat option: --no-novel-indels
# Expected value: true, false
no_novel_indels = false

# =========================================================================== #
# -----------:: Wedring pipeline Differential expression stage ::------------ #
# =========================================================================== #

# =========================================================================== #
# For more informations about DESeq and its parameters see:
# http://www.bioconductor.org/packages/release/bioc/html/DESeq.html
# =========================================================================== #

[DE]

# Empirical dispersion computation method.
# Expected value: pooled, per-condition, blind
method = pooled

# After the empirical dispersion values have been computed for each gene, a
# dispersion-mean relationship is fitted for sharing information across genes in
# order to reduce variability of the dispersion estimates. After that, for each
# gene, we have two values: the empirical value (derived only from this gene's
# data), and the fitted value (i.e., the dispersion value typical for genes with
# an average expression similar to those of this gene). Which of this values
# will be used?
# Expected value: fit-only, maximum, gene-est-only
sharing_mode = maximum

# Fit type to be used.
# Expected value: parametric, local
fit_type = parametric

# Generate MA plot.
# Expected value: true, false
ma_plot = false

# Generate Volcano plot.
# Expected value: true, false
volcano_plot = false

# Generate estimated dispersion plot.
# Expected value: true, false
dispest_plot = false

# Significance level to be considered. Usually this value is low, for example
# 0.1, 0.05, 0.01 etc.
# Expected value: decimal value between 0 and 1
alpha = 0.05

# If one or more plots are true, create images sized to one of this:
# 256 x 256 (small), 516 x 516 (medium), 1024 x 1024 (large)
# Expected value: small, medium, large
img_size = medium